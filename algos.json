{"__v":0,"_id":{"$oid":"55201bce021f107d2afa1d8b"},"challenge":"Use \u003ca href=\"https://www.youtube.com/watch?v=8Ls1RqHCOPw\" target=_blank\"\u003eDijkstra's Algorithm\u003c/a\u003e to find the shortest distance from u to all the other nodes.","check":"var ans = {y: 4, x: 2, s: 11, u: 0, v: 1}\nreturn _.isEqual(JSON.parse(el.replace(/'/g,'\"')),ans)","module":"Dynamic Programming","name":"Dijkstra's Algorithm","solution":"import sys\nfrom heapq import heappush, heappop\n \nclass Dijkstra:\n    def __init__(self, adjacents):\n        self.adj = adjacents\n        self.n = len(adjacents)\n \n    def dijkstra(self, start):\n        dis, vis, hq = {}, {}, []\n \n        for node in self.adj.keys():\n            # distance, visited\n            dis[node], vis[node] = sys.maxint, False\n \n        dis[start], vis[start] = 0, True\n        heappush(hq, (0, start))\n \n        while hq:\n            (d, node) = heappop(hq)\n            vis[node] = True\n \n            for n, weight in self.adj[node].items():\n                if (not vis[n]) and (d + weight \u003c dis[n]):\n                    dis[n] = d + weight\n                    heappush(hq, (dis[n], n))\n \n        return dis\n \n \ngraph = {\n    's':{'u':10, 'x':5},\n    'u':{'v':1, 'x':2},\n    'v':{'y':4},\n    'x':{'u':3, 'v':9, 'y':2},\n    'y':{'s':7, 'v':6}\n}\n \n \nif __name__ == '__main__':\n    d = Dijkstra(graph)\n    print d.dijkstra('u')","start":"import sys\nfrom heapq import heappush, heappop\n \n\n\ngraph = {\n    's':{'u':10, 'x':5},\n    'u':{'v':1, 'x':2},\n    'v':{'y':4},\n    'x':{'u':3, 'v':9, 'y':2},\n    'y':{'s':7, 'v':6}\n}\n \n \nd = Dijkstra(graph)\nprint d.dijkstra('u')","subject":{"$oid":"551edc0139cc6e7a0f00000b"}}
{"__v":0,"_id":{"$oid":"55242d695e2dfb6b5fc17f26"},"challenge":"Use the \u003ca href=\"https://www.youtube.com/watch?v=iTW2yFYd1Nc\"\u003eBellman-Ford Algorithm\u003c/a\u003e to print the shortest paths from 's' to all other nodes.","check":"var ans = {y: 7, x: 4, s: 0, z: -2, t: 2}\nreturn _.isEqual(JSON.parse(el.replace(/'/g,'\"')),ans)","module":"Dynamic Programming","name":"Bellman-Ford","solution":"graph = { \n    's' : {'t':6, 'y':7},\n    't' : {'x':5, 'z':-4, 'y':8 },\n    'y' : {'z':9, 'x':-3},\n    'z' : {'x':7, 's': 2},\n    'x' : {'t':-2}\n}\n\ndef bellman_ford(graph, s):\n    dist, pred, inf = {}, {}, float('inf')\n    for v in graph:\n        dist[v] = inf\n        pred[v] = None\n    dist[s] = 0\n    edges = [(u, v) for u in graph for v in graph[u].keys()]\n    for i in range(len(graph)-1):\n        for (u, v) in edges:\n            if dist[v] \u003e dist[u] + graph[u][v]:\n                dist[v] = dist[u] + graph[u][v]\n                pred[v] = u\n    for (u, v) in edges:\n        if dist[v] \u003e dist[u] + graph[u][v]:\n            return \"Graph contains a negative cycle\"\n    return dist\n\nprint bellman_ford(graph, 's')","start":"graph = { \n    's' : {'t':6, 'y':7},\n    't' : {'x':5, 'z':-4, 'y':8 },\n    'y' : {'z':9, 'x':-3},\n    'z' : {'x':7, 's': 2},\n    'x' : {'t':-2}\n}\n\n\n\nprint bellman_ford(graph, 's')","subject":{"$oid":"551edc0139cc6e7a0f00000b"}}
{"__v":0,"_id":{"$oid":"55248b8e2ce30aa824592c0d"},"challenge":"Use  the \u003ca href=\"https://www.youtube.com/watch?v=8TRX85-myD4\" target=_blank\"\u003eFloyd Warshall Algorithm\u003c/a\u003e to find the shortest paths between all pairs of vertices.","check":"ans = [[ 0, -1, -2,  0], [ 4,  0,  2,  4], [ 5,  1,  0,  2], [ 3, -1,  1,  0]]\nel = el.replace(/\\n/g,',')\nel = el.replace(/\\./g,'')\nel = el.replace(/(\\d)\\s/g,\"$1, \")\nel = el.substring(0,el.length-1)\nel = JSON.parse(el)\nreturn _.isEqual(el,ans)","module":"Dynamic Programming","name":"Floyd Warshall","solution":"from numpy import array, inf\n\ndef floyd_warshall(mat):\n    n = len(mat)\n    for k in range(n):\n        for i in range(n):\n            for j in range(n):\n                mat[i,j] = min(mat[i,j], mat[i,k] + mat[k,j])\n    return mat\n\nmatrix = array([\n    [  0.,  inf,  -2.,  inf],\n    [  4.,   0.,   3.,  inf],\n    [ inf,  inf,   0.,   2.],\n    [ inf,  -1.,  inf,   0.]\n])\nprint floyd_warshall(matrix)","start":"from numpy import array, inf\n\n\n\nmatrix = array([\n    [  0.,  inf,  -2.,  inf],\n    [  4.,   0.,   3.,  inf],\n    [ inf,  inf,   0.,   2.],\n    [ inf,  -1.,  inf,   0.]\n])\n\nprint floyd_warshall(matrix)","subject":{"$oid":"551edc0139cc6e7a0f00000b"}}
{"__v":0,"_id":{"$oid":"55258a9069ca6c238a51e81d"},"challenge":"Solve the \u003ca href=\"https://www.youtube.com/watch?v=EH6h7WA7sDw\" target=_blank\u003eKnapsack Problem\u003c/a\u003e with the given items and weights.","check":"return \"['Hatchet', \\\"Henry David Thoreau's 'Walden'\\\"]\" === el.trim()","module":"Dynamic Programming","name":"Knapsack Problem","solution":"class Item:\n    def __init__(self, id, weight, profit):\n        self.id = id\n        self.weight = weight \n        self.profit = profit\n\ndef knapsack(max, items):\n    knap = [[0]*(max+1) for i in range(len(items)+1)]\n    for idx in range(1,len(items)+1):\n        cur = items[idx-1]                    # current item\n        for knapW in range(1, max+1):\n            if cur.weight \u003e knapW:\n                knap[idx][knapW] = knap[idx-1][knapW]\n            else:\n                inc = knap[idx-1][knapW - cur.weight] + cur.profit\n                if knap[idx-1][knapW] \u003e inc:\n                    knap[idx][knapW] = knap[idx-1][knapW]\n                else:\n                    knap[idx][knapW] = inc\n    ids = []\n    idx = len(knap)-1\n    knapW = len(knap[idx])-1\n    while idx \u003e 0 and knapW \u003e 0:\n        if knap[idx][knapW] != knap[idx-1][knapW]:\n            ids.append(items[idx-1].id)\n            knapW -= items[idx-1].weight\n        idx-=1\n    ids.sort()\n    return ids\n\nitems = [\n    Item(\"Hatchet\", 4, 20),\n    Item(\"Henry David Thoreau's 'Walden'\", 1, 15),\n    Item(\"Laptop\", 5, 6)\n]\nprint knapsack(5, items)","start":"class Item:\n    def __init__(self, id, weight, profit):\n        self.id = id\n        self.weight = weight \n        self.profit = profit\n\n\n\nitems = [\n    Item(\"Hatchet\", 4, 20),\n    Item(\"Henry David Thoreau's 'Walden'\", 1, 15),\n    Item(\"Laptop\", 5, 6)\n]\nprint knapsack(5, items)","subject":{"$oid":"551edc0139cc6e7a0f00000b"}}
